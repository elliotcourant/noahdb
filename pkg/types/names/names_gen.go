package main

import (
	"gopkg.in/yaml.v2"
	"io/ioutil"
	"os"
	"text/template"
)

type TypeNameItem struct {
	Oid     int32    `yaml:"oid"`
	Name    string   `yaml:"name"`
	Aliases []string `yaml:"aliases"`
}

func main() {
	typeNamesYaml, err := ioutil.ReadFile("./pkg/types/names/type_names.yaml")
	if err != nil {
		panic(err)
	}

	typeNames := make([]TypeNameItem, 0)

	if err := yaml.Unmarshal(typeNamesYaml, &typeNames); err != nil {
		panic(err)
	}

	a := template.Must(template.New("1").Parse(typeNameTemplate))

	a.Execute(os.Stdout, typeNames)
}

const typeNameTemplate = `// Code generated by pkg/types/names/names_gen.go - DO NOT EDIT

package types

var (
	typesByName = map[string]Type{ {{range $index, $typeName := .}}
		"{{$typeName.Name}}": Type({{$typeName.Oid}}),{{range $i, $alias := $typeName.Aliases}}
		"{{$alias}}": Type({{$typeName.Oid}}),{{end}} {{end}}
	}
)
`
